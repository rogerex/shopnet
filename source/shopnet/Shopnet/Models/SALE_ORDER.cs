//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Shopnet.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CUSTOMER))]
    [KnownType(typeof(DETAIL_ORDER))]
    [KnownType(typeof(PAYMENT))]
    [KnownType(typeof(TYPE_PAYMENT))]
    [KnownType(typeof(USER))]
    public partial class SALE_ORDER: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ID_SALE
        {
            get { return _iD_SALE; }
            set
            {
                if (_iD_SALE != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID_SALE' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD_SALE = value;
                    OnPropertyChanged("ID_SALE");
                }
            }
        }
        private int _iD_SALE;
    
        [DataMember]
        public int ID_CUSTOMER
        {
            get { return _iD_CUSTOMER; }
            set
            {
                if (_iD_CUSTOMER != value)
                {
                    ChangeTracker.RecordOriginalValue("ID_CUSTOMER", _iD_CUSTOMER);
                    if (!IsDeserializing)
                    {
                        if (CUSTOMER != null && CUSTOMER.ID_CUSTOMER != value)
                        {
                            CUSTOMER = null;
                        }
                    }
                    _iD_CUSTOMER = value;
                    OnPropertyChanged("ID_CUSTOMER");
                }
            }
        }
        private int _iD_CUSTOMER;
    
        [DataMember]
        public int ID_TYPE_PAYMENT
        {
            get { return _iD_TYPE_PAYMENT; }
            set
            {
                if (_iD_TYPE_PAYMENT != value)
                {
                    ChangeTracker.RecordOriginalValue("ID_TYPE_PAYMENT", _iD_TYPE_PAYMENT);
                    if (!IsDeserializing)
                    {
                        if (TYPE_PAYMENT != null && TYPE_PAYMENT.ID_TYPE_PAYMENT != value)
                        {
                            TYPE_PAYMENT = null;
                        }
                    }
                    _iD_TYPE_PAYMENT = value;
                    OnPropertyChanged("ID_TYPE_PAYMENT");
                }
            }
        }
        private int _iD_TYPE_PAYMENT;
    
        [DataMember]
        public int ID_USER
        {
            get { return _iD_USER; }
            set
            {
                if (_iD_USER != value)
                {
                    ChangeTracker.RecordOriginalValue("ID_USER", _iD_USER);
                    if (!IsDeserializing)
                    {
                        if (USER != null && USER.ID_USER != value)
                        {
                            USER = null;
                        }
                    }
                    _iD_USER = value;
                    OnPropertyChanged("ID_USER");
                }
            }
        }
        private int _iD_USER;
    
        [DataMember]
        public System.DateTime CREATION_SALE
        {
            get { return _cREATION_SALE; }
            set
            {
                if (_cREATION_SALE != value)
                {
                    _cREATION_SALE = value;
                    OnPropertyChanged("CREATION_SALE");
                }
            }
        }
        private System.DateTime _cREATION_SALE;
    
        [DataMember]
        public decimal TOTAL_SALE
        {
            get { return _tOTAL_SALE; }
            set
            {
                if (_tOTAL_SALE != value)
                {
                    _tOTAL_SALE = value;
                    OnPropertyChanged("TOTAL_SALE");
                }
            }
        }
        private decimal _tOTAL_SALE;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public CUSTOMER CUSTOMER
        {
            get { return _cUSTOMER; }
            set
            {
                if (!ReferenceEquals(_cUSTOMER, value))
                {
                    var previousValue = _cUSTOMER;
                    _cUSTOMER = value;
                    FixupCUSTOMER(previousValue);
                    OnNavigationPropertyChanged("CUSTOMER");
                }
            }
        }
        private CUSTOMER _cUSTOMER;
    
        [DataMember]
        public TrackableCollection<DETAIL_ORDER> DETAIL_ORDER
        {
            get
            {
                if (_dETAIL_ORDER == null)
                {
                    _dETAIL_ORDER = new TrackableCollection<DETAIL_ORDER>();
                    _dETAIL_ORDER.CollectionChanged += FixupDETAIL_ORDER;
                }
                return _dETAIL_ORDER;
            }
            set
            {
                if (!ReferenceEquals(_dETAIL_ORDER, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_dETAIL_ORDER != null)
                    {
                        _dETAIL_ORDER.CollectionChanged -= FixupDETAIL_ORDER;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (DETAIL_ORDER item in _dETAIL_ORDER)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _dETAIL_ORDER = value;
                    if (_dETAIL_ORDER != null)
                    {
                        _dETAIL_ORDER.CollectionChanged += FixupDETAIL_ORDER;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (DETAIL_ORDER item in _dETAIL_ORDER)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("DETAIL_ORDER");
                }
            }
        }
        private TrackableCollection<DETAIL_ORDER> _dETAIL_ORDER;
    
        [DataMember]
        public TrackableCollection<PAYMENT> PAYMENTs
        {
            get
            {
                if (_pAYMENTs == null)
                {
                    _pAYMENTs = new TrackableCollection<PAYMENT>();
                    _pAYMENTs.CollectionChanged += FixupPAYMENTs;
                }
                return _pAYMENTs;
            }
            set
            {
                if (!ReferenceEquals(_pAYMENTs, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_pAYMENTs != null)
                    {
                        _pAYMENTs.CollectionChanged -= FixupPAYMENTs;
                    }
                    _pAYMENTs = value;
                    if (_pAYMENTs != null)
                    {
                        _pAYMENTs.CollectionChanged += FixupPAYMENTs;
                    }
                    OnNavigationPropertyChanged("PAYMENTs");
                }
            }
        }
        private TrackableCollection<PAYMENT> _pAYMENTs;
    
        [DataMember]
        public TYPE_PAYMENT TYPE_PAYMENT
        {
            get { return _tYPE_PAYMENT; }
            set
            {
                if (!ReferenceEquals(_tYPE_PAYMENT, value))
                {
                    var previousValue = _tYPE_PAYMENT;
                    _tYPE_PAYMENT = value;
                    FixupTYPE_PAYMENT(previousValue);
                    OnNavigationPropertyChanged("TYPE_PAYMENT");
                }
            }
        }
        private TYPE_PAYMENT _tYPE_PAYMENT;
    
        [DataMember]
        public USER USER
        {
            get { return _uSER; }
            set
            {
                if (!ReferenceEquals(_uSER, value))
                {
                    var previousValue = _uSER;
                    _uSER = value;
                    FixupUSER(previousValue);
                    OnNavigationPropertyChanged("USER");
                }
            }
        }
        private USER _uSER;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            CUSTOMER = null;
            DETAIL_ORDER.Clear();
            PAYMENTs.Clear();
            TYPE_PAYMENT = null;
            USER = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupCUSTOMER(CUSTOMER previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SALE_ORDER.Contains(this))
            {
                previousValue.SALE_ORDER.Remove(this);
            }
    
            if (CUSTOMER != null)
            {
                if (!CUSTOMER.SALE_ORDER.Contains(this))
                {
                    CUSTOMER.SALE_ORDER.Add(this);
                }
    
                ID_CUSTOMER = CUSTOMER.ID_CUSTOMER;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CUSTOMER")
                    && (ChangeTracker.OriginalValues["CUSTOMER"] == CUSTOMER))
                {
                    ChangeTracker.OriginalValues.Remove("CUSTOMER");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CUSTOMER", previousValue);
                }
                if (CUSTOMER != null && !CUSTOMER.ChangeTracker.ChangeTrackingEnabled)
                {
                    CUSTOMER.StartTracking();
                }
            }
        }
    
        private void FixupTYPE_PAYMENT(TYPE_PAYMENT previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SALE_ORDER.Contains(this))
            {
                previousValue.SALE_ORDER.Remove(this);
            }
    
            if (TYPE_PAYMENT != null)
            {
                if (!TYPE_PAYMENT.SALE_ORDER.Contains(this))
                {
                    TYPE_PAYMENT.SALE_ORDER.Add(this);
                }
    
                ID_TYPE_PAYMENT = TYPE_PAYMENT.ID_TYPE_PAYMENT;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TYPE_PAYMENT")
                    && (ChangeTracker.OriginalValues["TYPE_PAYMENT"] == TYPE_PAYMENT))
                {
                    ChangeTracker.OriginalValues.Remove("TYPE_PAYMENT");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TYPE_PAYMENT", previousValue);
                }
                if (TYPE_PAYMENT != null && !TYPE_PAYMENT.ChangeTracker.ChangeTrackingEnabled)
                {
                    TYPE_PAYMENT.StartTracking();
                }
            }
        }
    
        private void FixupUSER(USER previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SALE_ORDER.Contains(this))
            {
                previousValue.SALE_ORDER.Remove(this);
            }
    
            if (USER != null)
            {
                if (!USER.SALE_ORDER.Contains(this))
                {
                    USER.SALE_ORDER.Add(this);
                }
    
                ID_USER = USER.ID_USER;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("USER")
                    && (ChangeTracker.OriginalValues["USER"] == USER))
                {
                    ChangeTracker.OriginalValues.Remove("USER");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("USER", previousValue);
                }
                if (USER != null && !USER.ChangeTracker.ChangeTrackingEnabled)
                {
                    USER.StartTracking();
                }
            }
        }
    
        private void FixupDETAIL_ORDER(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DETAIL_ORDER item in e.NewItems)
                {
                    item.SALE_ORDER = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DETAIL_ORDER", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DETAIL_ORDER item in e.OldItems)
                {
                    if (ReferenceEquals(item.SALE_ORDER, this))
                    {
                        item.SALE_ORDER = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DETAIL_ORDER", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupPAYMENTs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PAYMENT item in e.NewItems)
                {
                    item.SALE_ORDER = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PAYMENTs", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PAYMENT item in e.OldItems)
                {
                    if (ReferenceEquals(item.SALE_ORDER, this))
                    {
                        item.SALE_ORDER = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PAYMENTs", item);
                    }
                }
            }
        }

        #endregion
    }
}
