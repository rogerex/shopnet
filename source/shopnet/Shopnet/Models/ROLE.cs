//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Shopnet.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ITEM))]
    [KnownType(typeof(USER))]
    public partial class ROLE: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ID_ROLE
        {
            get { return _iD_ROLE; }
            set
            {
                if (_iD_ROLE != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID_ROLE' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD_ROLE = value;
                    OnPropertyChanged("ID_ROLE");
                }
            }
        }
        private int _iD_ROLE;
    
        [DataMember]
        public string NAME_ROLE
        {
            get { return _nAME_ROLE; }
            set
            {
                if (_nAME_ROLE != value)
                {
                    _nAME_ROLE = value;
                    OnPropertyChanged("NAME_ROLE");
                }
            }
        }
        private string _nAME_ROLE;
    
        [DataMember]
        public System.DateTime CREATION_ROLE
        {
            get { return _cREATION_ROLE; }
            set
            {
                if (_cREATION_ROLE != value)
                {
                    _cREATION_ROLE = value;
                    OnPropertyChanged("CREATION_ROLE");
                }
            }
        }
        private System.DateTime _cREATION_ROLE;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<ITEM> ITEMs
        {
            get
            {
                if (_iTEMs == null)
                {
                    _iTEMs = new TrackableCollection<ITEM>();
                    _iTEMs.CollectionChanged += FixupITEMs;
                }
                return _iTEMs;
            }
            set
            {
                if (!ReferenceEquals(_iTEMs, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_iTEMs != null)
                    {
                        _iTEMs.CollectionChanged -= FixupITEMs;
                    }
                    _iTEMs = value;
                    if (_iTEMs != null)
                    {
                        _iTEMs.CollectionChanged += FixupITEMs;
                    }
                    OnNavigationPropertyChanged("ITEMs");
                }
            }
        }
        private TrackableCollection<ITEM> _iTEMs;
    
        [DataMember]
        public TrackableCollection<USER> USERs
        {
            get
            {
                if (_uSERs == null)
                {
                    _uSERs = new TrackableCollection<USER>();
                    _uSERs.CollectionChanged += FixupUSERs;
                }
                return _uSERs;
            }
            set
            {
                if (!ReferenceEquals(_uSERs, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_uSERs != null)
                    {
                        _uSERs.CollectionChanged -= FixupUSERs;
                    }
                    _uSERs = value;
                    if (_uSERs != null)
                    {
                        _uSERs.CollectionChanged += FixupUSERs;
                    }
                    OnNavigationPropertyChanged("USERs");
                }
            }
        }
        private TrackableCollection<USER> _uSERs;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ITEMs.Clear();
            USERs.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupITEMs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ITEM item in e.NewItems)
                {
                    if (!item.ROLEs.Contains(this))
                    {
                        item.ROLEs.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ITEMs", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ITEM item in e.OldItems)
                {
                    if (item.ROLEs.Contains(this))
                    {
                        item.ROLEs.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ITEMs", item);
                    }
                }
            }
        }
    
        private void FixupUSERs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (USER item in e.NewItems)
                {
                    if (!item.ROLEs.Contains(this))
                    {
                        item.ROLEs.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("USERs", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (USER item in e.OldItems)
                {
                    if (item.ROLEs.Contains(this))
                    {
                        item.ROLEs.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("USERs", item);
                    }
                }
            }
        }

        #endregion
    }
}
