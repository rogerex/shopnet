//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Shopnet.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(PRODUCT))]
    [KnownType(typeof(SALE_ORDER))]
    public partial class DETAIL_ORDER: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ID_SALE
        {
            get { return _iD_SALE; }
            set
            {
                if (_iD_SALE != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID_SALE' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (SALE_ORDER != null && SALE_ORDER.ID_SALE != value)
                        {
                            SALE_ORDER = null;
                        }
                    }
                    _iD_SALE = value;
                    OnPropertyChanged("ID_SALE");
                }
            }
        }
        private int _iD_SALE;
    
        [DataMember]
        public int ID_PRODUCT
        {
            get { return _iD_PRODUCT; }
            set
            {
                if (_iD_PRODUCT != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID_PRODUCT' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (PRODUCT != null && PRODUCT.ID_PRODUCT != value)
                        {
                            PRODUCT = null;
                        }
                    }
                    _iD_PRODUCT = value;
                    OnPropertyChanged("ID_PRODUCT");
                }
            }
        }
        private int _iD_PRODUCT;
    
        [DataMember]
        public decimal PRICE_PRODUCT
        {
            get { return _pRICE_PRODUCT; }
            set
            {
                if (_pRICE_PRODUCT != value)
                {
                    _pRICE_PRODUCT = value;
                    OnPropertyChanged("PRICE_PRODUCT");
                }
            }
        }
        private decimal _pRICE_PRODUCT;
    
        [DataMember]
        public int AMOUNT_PRODUCT
        {
            get { return _aMOUNT_PRODUCT; }
            set
            {
                if (_aMOUNT_PRODUCT != value)
                {
                    _aMOUNT_PRODUCT = value;
                    OnPropertyChanged("AMOUNT_PRODUCT");
                }
            }
        }
        private int _aMOUNT_PRODUCT;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public PRODUCT PRODUCT
        {
            get { return _pRODUCT; }
            set
            {
                if (!ReferenceEquals(_pRODUCT, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (ID_PRODUCT != value.ID_PRODUCT)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _pRODUCT;
                    _pRODUCT = value;
                    FixupPRODUCT(previousValue);
                    OnNavigationPropertyChanged("PRODUCT");
                }
            }
        }
        private PRODUCT _pRODUCT;
    
        [DataMember]
        public SALE_ORDER SALE_ORDER
        {
            get { return _sALE_ORDER; }
            set
            {
                if (!ReferenceEquals(_sALE_ORDER, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (ID_SALE != value.ID_SALE)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _sALE_ORDER;
                    _sALE_ORDER = value;
                    FixupSALE_ORDER(previousValue);
                    OnNavigationPropertyChanged("SALE_ORDER");
                }
            }
        }
        private SALE_ORDER _sALE_ORDER;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            PRODUCT = null;
            SALE_ORDER = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupPRODUCT(PRODUCT previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DETAIL_ORDER.Contains(this))
            {
                previousValue.DETAIL_ORDER.Remove(this);
            }
    
            if (PRODUCT != null)
            {
                if (!PRODUCT.DETAIL_ORDER.Contains(this))
                {
                    PRODUCT.DETAIL_ORDER.Add(this);
                }
    
                ID_PRODUCT = PRODUCT.ID_PRODUCT;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PRODUCT")
                    && (ChangeTracker.OriginalValues["PRODUCT"] == PRODUCT))
                {
                    ChangeTracker.OriginalValues.Remove("PRODUCT");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PRODUCT", previousValue);
                }
                if (PRODUCT != null && !PRODUCT.ChangeTracker.ChangeTrackingEnabled)
                {
                    PRODUCT.StartTracking();
                }
            }
        }
    
        private void FixupSALE_ORDER(SALE_ORDER previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DETAIL_ORDER.Contains(this))
            {
                previousValue.DETAIL_ORDER.Remove(this);
            }
    
            if (SALE_ORDER != null)
            {
                if (!SALE_ORDER.DETAIL_ORDER.Contains(this))
                {
                    SALE_ORDER.DETAIL_ORDER.Add(this);
                }
    
                ID_SALE = SALE_ORDER.ID_SALE;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SALE_ORDER")
                    && (ChangeTracker.OriginalValues["SALE_ORDER"] == SALE_ORDER))
                {
                    ChangeTracker.OriginalValues.Remove("SALE_ORDER");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SALE_ORDER", previousValue);
                }
                if (SALE_ORDER != null && !SALE_ORDER.ChangeTracker.ChangeTrackingEnabled)
                {
                    SALE_ORDER.StartTracking();
                }
            }
        }

        #endregion
    }
}
