//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Shopnet.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(USER))]
    public partial class SESSION: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ID_SESSION
        {
            get { return _iD_SESSION; }
            set
            {
                if (_iD_SESSION != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID_SESSION' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD_SESSION = value;
                    OnPropertyChanged("ID_SESSION");
                }
            }
        }
        private int _iD_SESSION;
    
        [DataMember]
        public int ID_USER
        {
            get { return _iD_USER; }
            set
            {
                if (_iD_USER != value)
                {
                    ChangeTracker.RecordOriginalValue("ID_USER", _iD_USER);
                    if (!IsDeserializing)
                    {
                        if (USER != null && USER.ID_USER != value)
                        {
                            USER = null;
                        }
                    }
                    _iD_USER = value;
                    OnPropertyChanged("ID_USER");
                }
            }
        }
        private int _iD_USER;
    
        [DataMember]
        public System.DateTime INIT_SESSION
        {
            get { return _iNIT_SESSION; }
            set
            {
                if (_iNIT_SESSION != value)
                {
                    _iNIT_SESSION = value;
                    OnPropertyChanged("INIT_SESSION");
                }
            }
        }
        private System.DateTime _iNIT_SESSION;
    
        [DataMember]
        public Nullable<System.DateTime> END_SESSION
        {
            get { return _eND_SESSION; }
            set
            {
                if (_eND_SESSION != value)
                {
                    _eND_SESSION = value;
                    OnPropertyChanged("END_SESSION");
                }
            }
        }
        private Nullable<System.DateTime> _eND_SESSION;
    
        [DataMember]
        public int STATUS_SESSION
        {
            get { return _sTATUS_SESSION; }
            set
            {
                if (_sTATUS_SESSION != value)
                {
                    _sTATUS_SESSION = value;
                    OnPropertyChanged("STATUS_SESSION");
                }
            }
        }
        private int _sTATUS_SESSION;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public USER USER
        {
            get { return _uSER; }
            set
            {
                if (!ReferenceEquals(_uSER, value))
                {
                    var previousValue = _uSER;
                    _uSER = value;
                    FixupUSER(previousValue);
                    OnNavigationPropertyChanged("USER");
                }
            }
        }
        private USER _uSER;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            USER = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupUSER(USER previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SESSIONs.Contains(this))
            {
                previousValue.SESSIONs.Remove(this);
            }
    
            if (USER != null)
            {
                if (!USER.SESSIONs.Contains(this))
                {
                    USER.SESSIONs.Add(this);
                }
    
                ID_USER = USER.ID_USER;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("USER")
                    && (ChangeTracker.OriginalValues["USER"] == USER))
                {
                    ChangeTracker.OriginalValues.Remove("USER");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("USER", previousValue);
                }
                if (USER != null && !USER.ChangeTracker.ChangeTrackingEnabled)
                {
                    USER.StartTracking();
                }
            }
        }

        #endregion
    }
}
