//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Shopnet.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DETAIL_ORDER))]
    [KnownType(typeof(STOCK))]
    public partial class PRODUCT: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ID_PRODUCT
        {
            get { return _iD_PRODUCT; }
            set
            {
                if (_iD_PRODUCT != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID_PRODUCT' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD_PRODUCT = value;
                    OnPropertyChanged("ID_PRODUCT");
                }
            }
        }
        private int _iD_PRODUCT;
    
        [DataMember]
        public string CODE_PRODUCT
        {
            get { return _cODE_PRODUCT; }
            set
            {
                if (_cODE_PRODUCT != value)
                {
                    _cODE_PRODUCT = value;
                    OnPropertyChanged("CODE_PRODUCT");
                }
            }
        }
        private string _cODE_PRODUCT;
    
        [DataMember]
        public string NAME_PRODUCT
        {
            get { return _nAME_PRODUCT; }
            set
            {
                if (_nAME_PRODUCT != value)
                {
                    _nAME_PRODUCT = value;
                    OnPropertyChanged("NAME_PRODUCT");
                }
            }
        }
        private string _nAME_PRODUCT;
    
        [DataMember]
        public string DESC_PRODUCT
        {
            get { return _dESC_PRODUCT; }
            set
            {
                if (_dESC_PRODUCT != value)
                {
                    _dESC_PRODUCT = value;
                    OnPropertyChanged("DESC_PRODUCT");
                }
            }
        }
        private string _dESC_PRODUCT;
    
        [DataMember]
        public Nullable<int> MINIMUM_PRODUCT
        {
            get { return _mINIMUM_PRODUCT; }
            set
            {
                if (_mINIMUM_PRODUCT != value)
                {
                    _mINIMUM_PRODUCT = value;
                    OnPropertyChanged("MINIMUM_PRODUCT");
                }
            }
        }
        private Nullable<int> _mINIMUM_PRODUCT;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<DETAIL_ORDER> DETAIL_ORDER
        {
            get
            {
                if (_dETAIL_ORDER == null)
                {
                    _dETAIL_ORDER = new TrackableCollection<DETAIL_ORDER>();
                    _dETAIL_ORDER.CollectionChanged += FixupDETAIL_ORDER;
                }
                return _dETAIL_ORDER;
            }
            set
            {
                if (!ReferenceEquals(_dETAIL_ORDER, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_dETAIL_ORDER != null)
                    {
                        _dETAIL_ORDER.CollectionChanged -= FixupDETAIL_ORDER;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (DETAIL_ORDER item in _dETAIL_ORDER)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _dETAIL_ORDER = value;
                    if (_dETAIL_ORDER != null)
                    {
                        _dETAIL_ORDER.CollectionChanged += FixupDETAIL_ORDER;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (DETAIL_ORDER item in _dETAIL_ORDER)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("DETAIL_ORDER");
                }
            }
        }
        private TrackableCollection<DETAIL_ORDER> _dETAIL_ORDER;
    
        [DataMember]
        public TrackableCollection<STOCK> STOCKs
        {
            get
            {
                if (_sTOCKs == null)
                {
                    _sTOCKs = new TrackableCollection<STOCK>();
                    _sTOCKs.CollectionChanged += FixupSTOCKs;
                }
                return _sTOCKs;
            }
            set
            {
                if (!ReferenceEquals(_sTOCKs, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_sTOCKs != null)
                    {
                        _sTOCKs.CollectionChanged -= FixupSTOCKs;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (STOCK item in _sTOCKs)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _sTOCKs = value;
                    if (_sTOCKs != null)
                    {
                        _sTOCKs.CollectionChanged += FixupSTOCKs;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (STOCK item in _sTOCKs)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("STOCKs");
                }
            }
        }
        private TrackableCollection<STOCK> _sTOCKs;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            DETAIL_ORDER.Clear();
            STOCKs.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupDETAIL_ORDER(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DETAIL_ORDER item in e.NewItems)
                {
                    item.PRODUCT = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DETAIL_ORDER", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DETAIL_ORDER item in e.OldItems)
                {
                    if (ReferenceEquals(item.PRODUCT, this))
                    {
                        item.PRODUCT = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DETAIL_ORDER", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupSTOCKs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (STOCK item in e.NewItems)
                {
                    item.PRODUCT = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("STOCKs", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (STOCK item in e.OldItems)
                {
                    if (ReferenceEquals(item.PRODUCT, this))
                    {
                        item.PRODUCT = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("STOCKs", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion
    }
}
