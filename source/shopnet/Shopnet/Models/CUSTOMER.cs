//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Shopnet.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(SALE_ORDER))]
    public partial class CUSTOMER: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ID_CUSTOMER
        {
            get { return _iD_CUSTOMER; }
            set
            {
                if (_iD_CUSTOMER != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID_CUSTOMER' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD_CUSTOMER = value;
                    OnPropertyChanged("ID_CUSTOMER");
                }
            }
        }
        private int _iD_CUSTOMER;
    
        [DataMember]
        public string NAME_CUSTOMER
        {
            get { return _nAME_CUSTOMER; }
            set
            {
                if (_nAME_CUSTOMER != value)
                {
                    _nAME_CUSTOMER = value;
                    OnPropertyChanged("NAME_CUSTOMER");
                }
            }
        }
        private string _nAME_CUSTOMER;
    
        [DataMember]
        public System.DateTime CREATION_CUSTOMER
        {
            get { return _cREATION_CUSTOMER; }
            set
            {
                if (_cREATION_CUSTOMER != value)
                {
                    _cREATION_CUSTOMER = value;
                    OnPropertyChanged("CREATION_CUSTOMER");
                }
            }
        }
        private System.DateTime _cREATION_CUSTOMER;
    
        [DataMember]
        public string PHONE_CUSTOMER
        {
            get { return _pHONE_CUSTOMER; }
            set
            {
                if (_pHONE_CUSTOMER != value)
                {
                    _pHONE_CUSTOMER = value;
                    OnPropertyChanged("PHONE_CUSTOMER");
                }
            }
        }
        private string _pHONE_CUSTOMER;
    
        [DataMember]
        public string ADDRESS_CUSTOMER
        {
            get { return _aDDRESS_CUSTOMER; }
            set
            {
                if (_aDDRESS_CUSTOMER != value)
                {
                    _aDDRESS_CUSTOMER = value;
                    OnPropertyChanged("ADDRESS_CUSTOMER");
                }
            }
        }
        private string _aDDRESS_CUSTOMER;
    
        [DataMember]
        public string EMAIL_CUSTOMER
        {
            get { return _eMAIL_CUSTOMER; }
            set
            {
                if (_eMAIL_CUSTOMER != value)
                {
                    _eMAIL_CUSTOMER = value;
                    OnPropertyChanged("EMAIL_CUSTOMER");
                }
            }
        }
        private string _eMAIL_CUSTOMER;
    
        [DataMember]
        public Nullable<decimal> LATITUDE_CUSTOMER
        {
            get { return _lATITUDE_CUSTOMER; }
            set
            {
                if (_lATITUDE_CUSTOMER != value)
                {
                    _lATITUDE_CUSTOMER = value;
                    OnPropertyChanged("LATITUDE_CUSTOMER");
                }
            }
        }
        private Nullable<decimal> _lATITUDE_CUSTOMER;
    
        [DataMember]
        public Nullable<decimal> LONGITUDE_CUSTOMER
        {
            get { return _lONGITUDE_CUSTOMER; }
            set
            {
                if (_lONGITUDE_CUSTOMER != value)
                {
                    _lONGITUDE_CUSTOMER = value;
                    OnPropertyChanged("LONGITUDE_CUSTOMER");
                }
            }
        }
        private Nullable<decimal> _lONGITUDE_CUSTOMER;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<SALE_ORDER> SALE_ORDER
        {
            get
            {
                if (_sALE_ORDER == null)
                {
                    _sALE_ORDER = new TrackableCollection<SALE_ORDER>();
                    _sALE_ORDER.CollectionChanged += FixupSALE_ORDER;
                }
                return _sALE_ORDER;
            }
            set
            {
                if (!ReferenceEquals(_sALE_ORDER, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_sALE_ORDER != null)
                    {
                        _sALE_ORDER.CollectionChanged -= FixupSALE_ORDER;
                    }
                    _sALE_ORDER = value;
                    if (_sALE_ORDER != null)
                    {
                        _sALE_ORDER.CollectionChanged += FixupSALE_ORDER;
                    }
                    OnNavigationPropertyChanged("SALE_ORDER");
                }
            }
        }
        private TrackableCollection<SALE_ORDER> _sALE_ORDER;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            SALE_ORDER.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupSALE_ORDER(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SALE_ORDER item in e.NewItems)
                {
                    item.CUSTOMER = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SALE_ORDER", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SALE_ORDER item in e.OldItems)
                {
                    if (ReferenceEquals(item.CUSTOMER, this))
                    {
                        item.CUSTOMER = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SALE_ORDER", item);
                    }
                }
            }
        }

        #endregion
    }
}
