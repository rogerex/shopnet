//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Shopnet.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(SaleOrder))]
    public partial class PAYMENT: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ID_PAYMENT
        {
            get { return _iD_PAYMENT; }
            set
            {
                if (_iD_PAYMENT != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID_PAYMENT' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD_PAYMENT = value;
                    OnPropertyChanged("ID_PAYMENT");
                }
            }
        }
        private int _iD_PAYMENT;
    
        [DataMember]
        public int ID_SALE
        {
            get { return _iD_SALE; }
            set
            {
                if (_iD_SALE != value)
                {
                    ChangeTracker.RecordOriginalValue("ID_SALE", _iD_SALE);
                    if (!IsDeserializing)
                    {
                        if (SALE_ORDER != null && SALE_ORDER.SaleID != value)
                        {
                            SALE_ORDER = null;
                        }
                    }
                    _iD_SALE = value;
                    OnPropertyChanged("ID_SALE");
                }
            }
        }
        private int _iD_SALE;
    
        [DataMember]
        public decimal MOUNT_PAYMENT
        {
            get { return _mOUNT_PAYMENT; }
            set
            {
                if (_mOUNT_PAYMENT != value)
                {
                    _mOUNT_PAYMENT = value;
                    OnPropertyChanged("MOUNT_PAYMENT");
                }
            }
        }
        private decimal _mOUNT_PAYMENT;
    
        [DataMember]
        public System.DateTime CREATION_PAYMENT
        {
            get { return _cREATION_PAYMENT; }
            set
            {
                if (_cREATION_PAYMENT != value)
                {
                    _cREATION_PAYMENT = value;
                    OnPropertyChanged("CREATION_PAYMENT");
                }
            }
        }
        private System.DateTime _cREATION_PAYMENT;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public SaleOrder SALE_ORDER
        {
            get { return _sALE_ORDER; }
            set
            {
                if (!ReferenceEquals(_sALE_ORDER, value))
                {
                    var previousValue = _sALE_ORDER;
                    _sALE_ORDER = value;
                    FixupSALE_ORDER(previousValue);
                    OnNavigationPropertyChanged("SALE_ORDER");
                }
            }
        }
        private SaleOrder _sALE_ORDER;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            SALE_ORDER = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupSALE_ORDER(SaleOrder previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Payments.Contains(this))
            {
                previousValue.Payments.Remove(this);
            }
    
            if (SALE_ORDER != null)
            {
                if (!SALE_ORDER.Payments.Contains(this))
                {
                    SALE_ORDER.Payments.Add(this);
                }
    
                ID_SALE = SALE_ORDER.SaleID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SALE_ORDER")
                    && (ChangeTracker.OriginalValues["SALE_ORDER"] == SALE_ORDER))
                {
                    ChangeTracker.OriginalValues.Remove("SALE_ORDER");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SALE_ORDER", previousValue);
                }
                if (SALE_ORDER != null && !SALE_ORDER.ChangeTracker.ChangeTrackingEnabled)
                {
                    SALE_ORDER.StartTracking();
                }
            }
        }

        #endregion
    }
}
