//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Shopnet.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CUSTOMER))]
    [KnownType(typeof(DetailOrder))]
    [KnownType(typeof(PAYMENT))]
    [KnownType(typeof(TYPE_PAYMENT))]
    [KnownType(typeof(USER))]
    public partial class SaleOrder: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int SaleID
        {
            get { return _saleID; }
            set
            {
                if (_saleID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'SaleID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _saleID = value;
                    OnPropertyChanged("SaleID");
                }
            }
        }
        private int _saleID;
    
        [DataMember]
        public int CustomerID
        {
            get { return _customerID; }
            set
            {
                if (_customerID != value)
                {
                    ChangeTracker.RecordOriginalValue("CustomerID", _customerID);
                    if (!IsDeserializing)
                    {
                        if (Customer != null && Customer.ID_CUSTOMER != value)
                        {
                            Customer = null;
                        }
                    }
                    _customerID = value;
                    OnPropertyChanged("CustomerID");
                }
            }
        }
        private int _customerID;
    
        [DataMember]
        public int TypePaymentID
        {
            get { return _typePaymentID; }
            set
            {
                if (_typePaymentID != value)
                {
                    ChangeTracker.RecordOriginalValue("TypePaymentID", _typePaymentID);
                    if (!IsDeserializing)
                    {
                        if (TypePayment != null && TypePayment.ID_TYPE_PAYMENT != value)
                        {
                            TypePayment = null;
                        }
                    }
                    _typePaymentID = value;
                    OnPropertyChanged("TypePaymentID");
                }
            }
        }
        private int _typePaymentID;
    
        [DataMember]
        public int UserID
        {
            get { return _userID; }
            set
            {
                if (_userID != value)
                {
                    ChangeTracker.RecordOriginalValue("UserID", _userID);
                    if (!IsDeserializing)
                    {
                        if (User != null && User.ID_USER != value)
                        {
                            User = null;
                        }
                    }
                    _userID = value;
                    OnPropertyChanged("UserID");
                }
            }
        }
        private int _userID;
    
        [DataMember]
        public System.DateTime Creation
        {
            get { return _creation; }
            set
            {
                if (_creation != value)
                {
                    _creation = value;
                    OnPropertyChanged("Creation");
                }
            }
        }
        private System.DateTime _creation;
    
        [DataMember]
        public decimal Total
        {
            get { return _total; }
            set
            {
                if (_total != value)
                {
                    _total = value;
                    OnPropertyChanged("Total");
                }
            }
        }
        private decimal _total;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public CUSTOMER Customer
        {
            get { return _customer; }
            set
            {
                if (!ReferenceEquals(_customer, value))
                {
                    var previousValue = _customer;
                    _customer = value;
                    FixupCustomer(previousValue);
                    OnNavigationPropertyChanged("Customer");
                }
            }
        }
        private CUSTOMER _customer;
    
        [DataMember]
        public TrackableCollection<DetailOrder> DetailOrder
        {
            get
            {
                if (_detailOrder == null)
                {
                    _detailOrder = new TrackableCollection<DetailOrder>();
                    _detailOrder.CollectionChanged += FixupDetailOrder;
                }
                return _detailOrder;
            }
            set
            {
                if (!ReferenceEquals(_detailOrder, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_detailOrder != null)
                    {
                        _detailOrder.CollectionChanged -= FixupDetailOrder;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (DetailOrder item in _detailOrder)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _detailOrder = value;
                    if (_detailOrder != null)
                    {
                        _detailOrder.CollectionChanged += FixupDetailOrder;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (DetailOrder item in _detailOrder)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("DetailOrder");
                }
            }
        }
        private TrackableCollection<DetailOrder> _detailOrder;
    
        [DataMember]
        public TrackableCollection<PAYMENT> Payments
        {
            get
            {
                if (_payments == null)
                {
                    _payments = new TrackableCollection<PAYMENT>();
                    _payments.CollectionChanged += FixupPayments;
                }
                return _payments;
            }
            set
            {
                if (!ReferenceEquals(_payments, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_payments != null)
                    {
                        _payments.CollectionChanged -= FixupPayments;
                    }
                    _payments = value;
                    if (_payments != null)
                    {
                        _payments.CollectionChanged += FixupPayments;
                    }
                    OnNavigationPropertyChanged("Payments");
                }
            }
        }
        private TrackableCollection<PAYMENT> _payments;
    
        [DataMember]
        public TYPE_PAYMENT TypePayment
        {
            get { return _typePayment; }
            set
            {
                if (!ReferenceEquals(_typePayment, value))
                {
                    var previousValue = _typePayment;
                    _typePayment = value;
                    FixupTypePayment(previousValue);
                    OnNavigationPropertyChanged("TypePayment");
                }
            }
        }
        private TYPE_PAYMENT _typePayment;
    
        [DataMember]
        public USER User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                    OnNavigationPropertyChanged("User");
                }
            }
        }
        private USER _user;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Customer = null;
            DetailOrder.Clear();
            Payments.Clear();
            TypePayment = null;
            User = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupCustomer(CUSTOMER previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SALE_ORDER.Contains(this))
            {
                previousValue.SALE_ORDER.Remove(this);
            }
    
            if (Customer != null)
            {
                if (!Customer.SALE_ORDER.Contains(this))
                {
                    Customer.SALE_ORDER.Add(this);
                }
    
                CustomerID = Customer.ID_CUSTOMER;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Customer")
                    && (ChangeTracker.OriginalValues["Customer"] == Customer))
                {
                    ChangeTracker.OriginalValues.Remove("Customer");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Customer", previousValue);
                }
                if (Customer != null && !Customer.ChangeTracker.ChangeTrackingEnabled)
                {
                    Customer.StartTracking();
                }
            }
        }
    
        private void FixupTypePayment(TYPE_PAYMENT previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SALE_ORDER.Contains(this))
            {
                previousValue.SALE_ORDER.Remove(this);
            }
    
            if (TypePayment != null)
            {
                if (!TypePayment.SALE_ORDER.Contains(this))
                {
                    TypePayment.SALE_ORDER.Add(this);
                }
    
                TypePaymentID = TypePayment.ID_TYPE_PAYMENT;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TypePayment")
                    && (ChangeTracker.OriginalValues["TypePayment"] == TypePayment))
                {
                    ChangeTracker.OriginalValues.Remove("TypePayment");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TypePayment", previousValue);
                }
                if (TypePayment != null && !TypePayment.ChangeTracker.ChangeTrackingEnabled)
                {
                    TypePayment.StartTracking();
                }
            }
        }
    
        private void FixupUser(USER previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SALE_ORDER.Contains(this))
            {
                previousValue.SALE_ORDER.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.SALE_ORDER.Contains(this))
                {
                    User.SALE_ORDER.Add(this);
                }
    
                UserID = User.ID_USER;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("User")
                    && (ChangeTracker.OriginalValues["User"] == User))
                {
                    ChangeTracker.OriginalValues.Remove("User");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("User", previousValue);
                }
                if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
                {
                    User.StartTracking();
                }
            }
        }
    
        private void FixupDetailOrder(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DetailOrder item in e.NewItems)
                {
                    item.SaleOrder = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DetailOrder", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DetailOrder item in e.OldItems)
                {
                    if (ReferenceEquals(item.SaleOrder, this))
                    {
                        item.SaleOrder = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DetailOrder", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupPayments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PAYMENT item in e.NewItems)
                {
                    item.SALE_ORDER = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Payments", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PAYMENT item in e.OldItems)
                {
                    if (ReferenceEquals(item.SALE_ORDER, this))
                    {
                        item.SALE_ORDER = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Payments", item);
                    }
                }
            }
        }

        #endregion
    }
}
