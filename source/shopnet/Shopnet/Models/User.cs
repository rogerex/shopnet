//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Shopnet.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Purchase))]
    [KnownType(typeof(Sale))]
    [KnownType(typeof(Session))]
    [KnownType(typeof(Role))]
    public partial class User: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int UserID
        {
            get { return _userID; }
            set
            {
                if (_userID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'UserID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _userID = value;
                    OnPropertyChanged("UserID");
                }
            }
        }
        private int _userID;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Password
        {
            get { return _password; }
            set
            {
                if (_password != value)
                {
                    _password = value;
                    OnPropertyChanged("Password");
                }
            }
        }
        private string _password;
    
        [DataMember]
        public System.DateTime Creation
        {
            get { return _creation; }
            set
            {
                if (_creation != value)
                {
                    _creation = value;
                    OnPropertyChanged("Creation");
                }
            }
        }
        private System.DateTime _creation;
    
        [DataMember]
        public int Status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    _status = value;
                    OnPropertyChanged("Status");
                }
            }
        }
        private int _status;
    
        [DataMember]
        public string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    OnPropertyChanged("Email");
                }
            }
        }
        private string _email;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Purchase> Purchases
        {
            get
            {
                if (_purchases == null)
                {
                    _purchases = new TrackableCollection<Purchase>();
                    _purchases.CollectionChanged += FixupPurchases;
                }
                return _purchases;
            }
            set
            {
                if (!ReferenceEquals(_purchases, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_purchases != null)
                    {
                        _purchases.CollectionChanged -= FixupPurchases;
                    }
                    _purchases = value;
                    if (_purchases != null)
                    {
                        _purchases.CollectionChanged += FixupPurchases;
                    }
                    OnNavigationPropertyChanged("Purchases");
                }
            }
        }
        private TrackableCollection<Purchase> _purchases;
    
        [DataMember]
        public TrackableCollection<Sale> Sales
        {
            get
            {
                if (_sales == null)
                {
                    _sales = new TrackableCollection<Sale>();
                    _sales.CollectionChanged += FixupSales;
                }
                return _sales;
            }
            set
            {
                if (!ReferenceEquals(_sales, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_sales != null)
                    {
                        _sales.CollectionChanged -= FixupSales;
                    }
                    _sales = value;
                    if (_sales != null)
                    {
                        _sales.CollectionChanged += FixupSales;
                    }
                    OnNavigationPropertyChanged("Sales");
                }
            }
        }
        private TrackableCollection<Sale> _sales;
    
        [DataMember]
        public TrackableCollection<Session> Sessions
        {
            get
            {
                if (_sessions == null)
                {
                    _sessions = new TrackableCollection<Session>();
                    _sessions.CollectionChanged += FixupSessions;
                }
                return _sessions;
            }
            set
            {
                if (!ReferenceEquals(_sessions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_sessions != null)
                    {
                        _sessions.CollectionChanged -= FixupSessions;
                    }
                    _sessions = value;
                    if (_sessions != null)
                    {
                        _sessions.CollectionChanged += FixupSessions;
                    }
                    OnNavigationPropertyChanged("Sessions");
                }
            }
        }
        private TrackableCollection<Session> _sessions;
    
        [DataMember]
        public TrackableCollection<Role> Roles
        {
            get
            {
                if (_roles == null)
                {
                    _roles = new TrackableCollection<Role>();
                    _roles.CollectionChanged += FixupRoles;
                }
                return _roles;
            }
            set
            {
                if (!ReferenceEquals(_roles, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_roles != null)
                    {
                        _roles.CollectionChanged -= FixupRoles;
                    }
                    _roles = value;
                    if (_roles != null)
                    {
                        _roles.CollectionChanged += FixupRoles;
                    }
                    OnNavigationPropertyChanged("Roles");
                }
            }
        }
        private TrackableCollection<Role> _roles;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Purchases.Clear();
            Sales.Clear();
            Sessions.Clear();
            Roles.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupPurchases(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Purchase item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Purchases", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Purchase item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Purchases", item);
                    }
                }
            }
        }
    
        private void FixupSales(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Sale item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Sales", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Sale item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Sales", item);
                    }
                }
            }
        }
    
        private void FixupSessions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Session item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Sessions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Session item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Sessions", item);
                    }
                }
            }
        }
    
        private void FixupRoles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Role item in e.NewItems)
                {
                    if (!item.Usuarios.Contains(this))
                    {
                        item.Usuarios.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Roles", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Role item in e.OldItems)
                {
                    if (item.Usuarios.Contains(this))
                    {
                        item.Usuarios.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Roles", item);
                    }
                }
            }
        }

        #endregion
    }
}
