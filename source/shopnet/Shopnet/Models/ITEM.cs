//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Shopnet.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Item))]
    [KnownType(typeof(Role))]
    public partial class Item: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ItemID
        {
            get { return _itemID; }
            set
            {
                if (_itemID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ItemID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _itemID = value;
                    OnPropertyChanged("ItemID");
                }
            }
        }
        private int _itemID;
    
        [DataMember]
        public Nullable<int> ParentItemID
        {
            get { return _parentItemID; }
            set
            {
                if (_parentItemID != value)
                {
                    ChangeTracker.RecordOriginalValue("ParentItemID", _parentItemID);
                    if (!IsDeserializing)
                    {
                        if (ParentItem != null && ParentItem.ItemID != value)
                        {
                            ParentItem = null;
                        }
                    }
                    _parentItemID = value;
                    OnPropertyChanged("ParentItemID");
                }
            }
        }
        private Nullable<int> _parentItemID;
    
        [DataMember]
        public string Descripton
        {
            get { return _descripton; }
            set
            {
                if (_descripton != value)
                {
                    _descripton = value;
                    OnPropertyChanged("Descripton");
                }
            }
        }
        private string _descripton;
    
        [DataMember]
        public string Path
        {
            get { return _path; }
            set
            {
                if (_path != value)
                {
                    _path = value;
                    OnPropertyChanged("Path");
                }
            }
        }
        private string _path;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Item> ChildItems
        {
            get
            {
                if (_childItems == null)
                {
                    _childItems = new TrackableCollection<Item>();
                    _childItems.CollectionChanged += FixupChildItems;
                }
                return _childItems;
            }
            set
            {
                if (!ReferenceEquals(_childItems, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_childItems != null)
                    {
                        _childItems.CollectionChanged -= FixupChildItems;
                    }
                    _childItems = value;
                    if (_childItems != null)
                    {
                        _childItems.CollectionChanged += FixupChildItems;
                    }
                    OnNavigationPropertyChanged("ChildItems");
                }
            }
        }
        private TrackableCollection<Item> _childItems;
    
        [DataMember]
        public Item ParentItem
        {
            get { return _parentItem; }
            set
            {
                if (!ReferenceEquals(_parentItem, value))
                {
                    var previousValue = _parentItem;
                    _parentItem = value;
                    FixupParentItem(previousValue);
                    OnNavigationPropertyChanged("ParentItem");
                }
            }
        }
        private Item _parentItem;
    
        [DataMember]
        public TrackableCollection<Role> Roles
        {
            get
            {
                if (_roles == null)
                {
                    _roles = new TrackableCollection<Role>();
                    _roles.CollectionChanged += FixupRoles;
                }
                return _roles;
            }
            set
            {
                if (!ReferenceEquals(_roles, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_roles != null)
                    {
                        _roles.CollectionChanged -= FixupRoles;
                    }
                    _roles = value;
                    if (_roles != null)
                    {
                        _roles.CollectionChanged += FixupRoles;
                    }
                    OnNavigationPropertyChanged("Roles");
                }
            }
        }
        private TrackableCollection<Role> _roles;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ChildItems.Clear();
            ParentItem = null;
            Roles.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupParentItem(Item previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ChildItems.Contains(this))
            {
                previousValue.ChildItems.Remove(this);
            }
    
            if (ParentItem != null)
            {
                if (!ParentItem.ChildItems.Contains(this))
                {
                    ParentItem.ChildItems.Add(this);
                }
    
                ParentItemID = ParentItem.ItemID;
            }
            else if (!skipKeys)
            {
                ParentItemID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ParentItem")
                    && (ChangeTracker.OriginalValues["ParentItem"] == ParentItem))
                {
                    ChangeTracker.OriginalValues.Remove("ParentItem");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ParentItem", previousValue);
                }
                if (ParentItem != null && !ParentItem.ChangeTracker.ChangeTrackingEnabled)
                {
                    ParentItem.StartTracking();
                }
            }
        }
    
        private void FixupChildItems(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Item item in e.NewItems)
                {
                    item.ParentItem = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ChildItems", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Item item in e.OldItems)
                {
                    if (ReferenceEquals(item.ParentItem, this))
                    {
                        item.ParentItem = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ChildItems", item);
                    }
                }
            }
        }
    
        private void FixupRoles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Role item in e.NewItems)
                {
                    if (!item.Items.Contains(this))
                    {
                        item.Items.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Roles", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Role item in e.OldItems)
                {
                    if (item.Items.Contains(this))
                    {
                        item.Items.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Roles", item);
                    }
                }
            }
        }

        #endregion
    }
}
