//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Shopnet.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ITEM))]
    [KnownType(typeof(ROLE))]
    public partial class ITEM: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ID_ITEM
        {
            get { return _iD_ITEM; }
            set
            {
                if (_iD_ITEM != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID_ITEM' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD_ITEM = value;
                    OnPropertyChanged("ID_ITEM");
                }
            }
        }
        private int _iD_ITEM;
    
        [DataMember]
        public Nullable<int> ID_PARENT_ITEM
        {
            get { return _iD_PARENT_ITEM; }
            set
            {
                if (_iD_PARENT_ITEM != value)
                {
                    ChangeTracker.RecordOriginalValue("ID_PARENT_ITEM", _iD_PARENT_ITEM);
                    if (!IsDeserializing)
                    {
                        if (ITEM2 != null && ITEM2.ID_ITEM != value)
                        {
                            ITEM2 = null;
                        }
                    }
                    _iD_PARENT_ITEM = value;
                    OnPropertyChanged("ID_PARENT_ITEM");
                }
            }
        }
        private Nullable<int> _iD_PARENT_ITEM;
    
        [DataMember]
        public string DESC_ITEM
        {
            get { return _dESC_ITEM; }
            set
            {
                if (_dESC_ITEM != value)
                {
                    _dESC_ITEM = value;
                    OnPropertyChanged("DESC_ITEM");
                }
            }
        }
        private string _dESC_ITEM;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<ITEM> ITEM1
        {
            get
            {
                if (_iTEM1 == null)
                {
                    _iTEM1 = new TrackableCollection<ITEM>();
                    _iTEM1.CollectionChanged += FixupITEM1;
                }
                return _iTEM1;
            }
            set
            {
                if (!ReferenceEquals(_iTEM1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_iTEM1 != null)
                    {
                        _iTEM1.CollectionChanged -= FixupITEM1;
                    }
                    _iTEM1 = value;
                    if (_iTEM1 != null)
                    {
                        _iTEM1.CollectionChanged += FixupITEM1;
                    }
                    OnNavigationPropertyChanged("ITEM1");
                }
            }
        }
        private TrackableCollection<ITEM> _iTEM1;
    
        [DataMember]
        public ITEM ITEM2
        {
            get { return _iTEM2; }
            set
            {
                if (!ReferenceEquals(_iTEM2, value))
                {
                    var previousValue = _iTEM2;
                    _iTEM2 = value;
                    FixupITEM2(previousValue);
                    OnNavigationPropertyChanged("ITEM2");
                }
            }
        }
        private ITEM _iTEM2;
    
        [DataMember]
        public TrackableCollection<ROLE> ROLEs
        {
            get
            {
                if (_rOLEs == null)
                {
                    _rOLEs = new TrackableCollection<ROLE>();
                    _rOLEs.CollectionChanged += FixupROLEs;
                }
                return _rOLEs;
            }
            set
            {
                if (!ReferenceEquals(_rOLEs, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_rOLEs != null)
                    {
                        _rOLEs.CollectionChanged -= FixupROLEs;
                    }
                    _rOLEs = value;
                    if (_rOLEs != null)
                    {
                        _rOLEs.CollectionChanged += FixupROLEs;
                    }
                    OnNavigationPropertyChanged("ROLEs");
                }
            }
        }
        private TrackableCollection<ROLE> _rOLEs;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ITEM1.Clear();
            ITEM2 = null;
            ROLEs.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupITEM2(ITEM previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ITEM1.Contains(this))
            {
                previousValue.ITEM1.Remove(this);
            }
    
            if (ITEM2 != null)
            {
                if (!ITEM2.ITEM1.Contains(this))
                {
                    ITEM2.ITEM1.Add(this);
                }
    
                ID_PARENT_ITEM = ITEM2.ID_ITEM;
            }
            else if (!skipKeys)
            {
                ID_PARENT_ITEM = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ITEM2")
                    && (ChangeTracker.OriginalValues["ITEM2"] == ITEM2))
                {
                    ChangeTracker.OriginalValues.Remove("ITEM2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ITEM2", previousValue);
                }
                if (ITEM2 != null && !ITEM2.ChangeTracker.ChangeTrackingEnabled)
                {
                    ITEM2.StartTracking();
                }
            }
        }
    
        private void FixupITEM1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ITEM item in e.NewItems)
                {
                    item.ITEM2 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ITEM1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ITEM item in e.OldItems)
                {
                    if (ReferenceEquals(item.ITEM2, this))
                    {
                        item.ITEM2 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ITEM1", item);
                    }
                }
            }
        }
    
        private void FixupROLEs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ROLE item in e.NewItems)
                {
                    if (!item.ITEMs.Contains(this))
                    {
                        item.ITEMs.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ROLEs", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ROLE item in e.OldItems)
                {
                    if (item.ITEMs.Contains(this))
                    {
                        item.ITEMs.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ROLEs", item);
                    }
                }
            }
        }

        #endregion
    }
}
