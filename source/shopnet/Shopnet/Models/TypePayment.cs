//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Web.Mvc;
using System.Linq;

namespace Shopnet.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Sale))]
    public partial class TypePayment: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int TypePaymentID
        {
            get { return _typePaymentID; }
            set
            {
                if (_typePaymentID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TypePaymentID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _typePaymentID = value;
                    OnPropertyChanged("TypePaymentID");
                }
            }
        }
        private int _typePaymentID;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public Nullable<int> Amount
        {
            get { return _amount; }
            set
            {
                if (_amount != value)
                {
                    _amount = value;
                    OnPropertyChanged("Amount");
                }
            }
        }
        private Nullable<int> _amount;
    
        [DataMember]
        public Nullable<decimal> TotalNumber
        {
            get { return _totalNumber; }
            set
            {
                if (_totalNumber != value)
                {
                    _totalNumber = value;
                    OnPropertyChanged("TotalNumber");
                }
            }
        }
        private Nullable<decimal> _totalNumber;
    
        [DataMember]
        [Required(ErrorMessage = "A Type Payment Name is required")]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public int Status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    _status = value;
                    OnPropertyChanged("Status");
                }
            }
        }
        private int _status;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Sale> Sales
        {
            get
            {
                if (_sales == null)
                {
                    _sales = new TrackableCollection<Sale>();
                    _sales.CollectionChanged += FixupSales;
                }
                return _sales;
            }
            set
            {
                if (!ReferenceEquals(_sales, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_sales != null)
                    {
                        _sales.CollectionChanged -= FixupSales;
                    }
                    _sales = value;
                    if (_sales != null)
                    {
                        _sales.CollectionChanged += FixupSales;
                    }
                    OnNavigationPropertyChanged("Sales");
                }
            }
        }
        private TrackableCollection<Sale> _sales;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Sales.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupSales(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Sale item in e.NewItems)
                {
                    item.TypePayment = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Sales", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Sale item in e.OldItems)
                {
                    if (ReferenceEquals(item.TypePayment, this))
                    {
                        item.TypePayment = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Sales", item);
                    }
                }
            }
        }

        #endregion

        #region Status for Type Payment

        public static List<SelectListItem> GetStatus()
        {
            List<SelectListItem> status = new List<SelectListItem>();
            status.Add(new SelectListItem() { Text = "Active", Value = "1" });
            status.Add(new SelectListItem() { Text = "Inactive", Value = "0" });

            return status;
        }

        public String SelectedStatus
        {
            get
            {
                var array = GetStatus().ToArray();
                var items = from value in array where value.Value == Status + "" select value;
                return items.Any() ? items.First<SelectListItem>().Text : "Undefined";
            }
        }

        #endregion
    }
}
